import streamlit as st
import numpy as np
from PIL import Image
from keras.preprocessing import image
from keras.models import load_model
import time
# Load the trained model
model1 = load_model('trained_model_resnet.h5')
model2 = load_model('trained_model_densenet.h5')
model3 = load_model('trained_model_stroke.h5')

def simulate_computation():
    progress_bar = st.progress(0)
    for i in range(100):
        time.sleep(0.05)  # Simulate computation time
        progress_bar.progress(i)
    st.success('Prediction Completed!')
    
# Function to preprocess the uploaded image
def preprocess_image(img):
    img = Image.open(img).convert('RGB')
    img = img.resize((224, 224))
    img = np.array(img)
    img = np.expand_dims(img, axis=0)
    img = img / 255.0
    return img
st.set_page_config(page_icon='random',layout='centered')    
with open( "style.css" ) as css:    
    st.markdown( f'<style>{css.read()}</style>' , unsafe_allow_html= True)

st.title('Brain Stroke Detection')

# Upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])


if uploaded_file is not None:
    col1,col2 = st.columns(2)
    with col1:
        st.image(uploaded_file, width=300,caption='Uploaded Image')
    img = preprocess_image(uploaded_file)
    
    

    prediction = model1.predict(img)    
    prediction2 = model2.predict(img)
    prediction3 = model3.predict(img)
    with st.spinner('Predicting...'):
            simulate_computation()
   
    with col2:
        st.subheader('Resnet Model')
        if prediction > 0.7:
            st.write('Prediction: High Risk')
        elif prediction < 0.3:
            st.write('Prediction: Low Risk')
        else: st.write('Prediction: Moderate Risk')    
        st.write(f'Probability: {prediction[0][0]*100:.2f}%')
        
        st.subheader('Densenet Model')
        if prediction2 > 0.7:
            st.write('Prediction: High Risk')
        elif prediction2 < 0.3:
            st.write('Prediction: Low Risk')
        else: st.write('Prediction: Moderate Risk')    
        st.write(f'Probability: {prediction2[0][0]*100:.2f}%')
        
        st.subheader('CNN Model')
        if prediction3 > 0.7:
            st.write('Prediction: High Risk')
        elif prediction3 < 0.3:
            st.write('Prediction: Low Risk')
        else: st.write('Prediction: Moderate Risk')    
        st.write(f'Probability: {prediction3[0][0]*100:.2f}%')
    
    final_prediction=(prediction[0][0]+prediction2[0][0]+prediction3[0][0])*100/3
            
    
        
    with st.sidebar:
        if final_prediction>70:
            st.image('brainred2.png', width=300)
            st.header('Prediction: High Risk')
        elif final_prediction<30:
            st.image('braingreen2.png', width=300)
            st.header('Prediction: Low Risk')
        else:
            st.image('brainyellow2.png', width=300)
            st.header('Prediction: Moderate Risk')
        st.header(f'Probability: {final_prediction:.2f}%')
        
       
else:
    with st.sidebar:
     
     st.image('brainblack.png', width=300)
     st.header('This model is used to predict Brain Stroke using Machine Learning')
     st.write('The brain stroke detection model proposed in the research work utilizes an ensemble machine learning algorithm to improve the accuracy of stroke detection. The model incorporates the predictions of various individual classifiers, such as CNN, DenseNet121 and ResNet50 to produce a final prediction. This approach uses a soft voting classifier-based approach, where the final prediction is obtained through the weighted average of the probability estimates generated by each classifier. The model aims to provide a faster and more reliable method for identifying strokes contributing early and accurate classification of stroke, which is crucial for providing appropriate treatment and improving outcomes.')